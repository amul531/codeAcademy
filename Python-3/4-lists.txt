IV. Lists

1. Create a function named double_index that has two parameters named lst and index. It should double the value of the element at index of lst and return the new list with the doubled value. If index is not a valid index, the function should return the original list.

2. Create a function named remove_middle which has three parameters named lst, start, and end. It should return a list where all elements in lst with an index between start and end (inclusive) have been removed. 
For example, the following code should return [4, 23, 42] because elements at indices 1, 2, and 3 have been removed:
remove_middle([4, 8, 15, 16, 23, 42], 1, 3)

3. Create a function named more_than_n that has three parameters named lst, item, and n. It should return True if item appears in the list more than n times and return False otherwise.

4. Create a function named more_frequent_item that has three parameters named lst, item1, and item2.Return either item1 or item2 depending on which item appears more often in lst. If the two items appear the same number of times, return item1.

5. Create a function called middle_element that has one parameter named lst. If there are an odd number of elements in lst, the function should return the middle element. If there are an even number of elements, the function should return the average of the middle two elements.

6. Write a function named append_sum that has one parameter named lst. It should add the last two elements of lst together and append the result to lst. It should do this process three times and then return lst.
For example, if lst started as [1, 1, 2], the final result should be [1, 1, 2, 3, 5, 8].

7. Write a function named larger_list that has two parameters named lst1 and lst2. It should return the last element of the list that contains more elements. If both lists are the same size, then return the last element of lst1. 

8. Write a function named combine_sort that has two parameters named lst1 and lst2. It should combine these two lists into one new list and sort the result. Return the new sorted list.

9. Create a function called append_size that has one parameter named lst. It should append the size of lst (inclusive) to the end of lst and return this new list.
For example, if lst was [23, 42, 108], the function should return [23, 42, 108, 3] because the size of lst was originally 3.

10. Create a function called every_three_nums that has one parameter named start. It should return a list of every third number between start and 100 (inclusive). For example, every_three_nums(91) should return the list [91, 94, 97, 100]. If start is greater than 100, the function should return an empty list.
